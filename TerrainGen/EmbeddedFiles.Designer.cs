//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TerrainGen {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class EmbeddedFiles {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal EmbeddedFiles() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("TerrainGen.EmbeddedFiles", typeof(EmbeddedFiles).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nublar.
        /// </summary>
        internal static string AppName {
            get {
                return ResourceManager.GetString("AppName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap arrow_switch {
            get {
                object obj = ResourceManager.GetObject("arrow_switch", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap brick_edit {
            get {
                object obj = ResourceManager.GetObject("brick_edit", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap cancel {
            get {
                object obj = ResourceManager.GetObject("cancel", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///uniform vec3 tint;
        ///
        ///in vec3 fragPos;
        ///in vec4 fragColor;
        ///in vec3 fragNormal;
        ///
        ///out vec4 color;
        ///
        ///void main()
        ///{
        ///  vec3 lightPos = vec3(100, 100, 100);
        ///
        ///  vec3 norm = normalize(fragNormal);
        ///  vec3 lightDir = normalize(lightPos - fragPos);  
        ///  float diffuse = max(dot(norm, lightDir), 0.0);
        ///
        ///  color = fragColor * vec4(tint, 1.) * diffuse;
        ///}.
        /// </summary>
        internal static string default_fs {
            get {
                return ResourceManager.GetString("default_fs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///// Input vertex data, different for all executions of this shader.
        ///layout(location = 0) in vec3 position;
        ///layout(location = 1) in vec3 normal;
        ///layout(location = 2) in vec4 color;
        ///
        ///out vec3 fragPos;
        ///out vec4 fragColor;
        ///out vec3 fragNormal;
        ///
        ///uniform mat4 m;
        ///uniform mat4 v;
        ///uniform mat4 p;
        ///  
        ///void main()
        ///{
        ///  fragColor = color / 255.;
        ///  fragNormal = normalize(normal);
        ///  // Output position of the vertex, in clip space : MVP * position
        ///  mat4 MVP = p*m*v;
        ///  gl_Position =  M [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string default_vs {
            get {
                return ResourceManager.GetString("default_vs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap folder_brick {
            get {
                object obj = ResourceManager.GetObject("folder_brick", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancelling previous render operation.
        /// </summary>
        internal static string Info_CancellingPreviousRenderOp {
            get {
                return ResourceManager.GetString("Info_CancellingPreviousRenderOp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reloaded {0}.
        /// </summary>
        internal static string Info_FileReloaded {
            get {
                return ResourceManager.GetString("Info_FileReloaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Window loaded.
        /// </summary>
        internal static string Info_WindowLoaded {
            get {
                return ResourceManager.GetString("Info_WindowLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [{0}{1}] {2}.
        /// </summary>
        internal static string Log_Format {
            get {
                return ResourceManager.GetString("Log_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
        /// </summary>
        internal static System.Drawing.Icon logo {
            get {
                object obj = ResourceManager.GetObject("logo", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generating heightmap.
        /// </summary>
        internal static string Status_GenHeightmap {
            get {
                return ResourceManager.GetString("Status_GenHeightmap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ready.
        /// </summary>
        internal static string Status_Ready {
            get {
                return ResourceManager.GetString("Status_Ready", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uploading VBO.
        /// </summary>
        internal static string Status_UploadVBO {
            get {
                return ResourceManager.GetString("Status_UploadVBO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using TerrainGenCore;
        ///
        ////// &lt;summary&gt;
        ////// Stores a collection of methods to generate terrain.
        ////// &lt;/summary&gt;
        ///[TerrainProvider]
        ///class TerrainGenerator
        ///{
        ///    /// &lt;summary&gt;
        ///    /// Returns the height of the terrain at a given point
        ///    /// &lt;/summary&gt;
        ///    /// &lt;param name=&quot;x&quot;&gt;The x coordiate of the point to sample&lt;/param&gt;
        ///    /// &lt;param name=&quot;z&quot;&gt;The z coordiate of the point to sample&lt;/param&gt;
        ///    /// &lt;returns&gt;A height between 0 and 255, inclusive&lt;/returns&gt;
        ///    public double GetTerrain( [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string terrain {
            get {
                return ResourceManager.GetString("terrain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsaved File.
        /// </summary>
        internal static string Title_Unsaved {
            get {
                return ResourceManager.GetString("Title_Unsaved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap wrench {
            get {
                object obj = ResourceManager.GetObject("wrench", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}
